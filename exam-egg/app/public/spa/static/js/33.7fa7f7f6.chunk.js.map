{"version":3,"sources":["service/questionsManger.js","service/examManger.js","model/examList/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","createExam","updateExam","getExamList","getExamDetail","examInfo","_ref","id","question_ids","exam_id","requestData","Promise","all","namespace","state","examType","questionsType","subject","examList","reducers","initData","Object","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","effects","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","action","call","put","result","keys","wrap","_context","prev","next","sent","forEach","item","key","data","type","stop","this","_ref2","_ref3","end_time","start_time","subject_id","_context2","actions","_ref4","_context3","exam"],"mappings":"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","file":"static/js/33.7fa7f7f6.chunk.js","sourcesContent":["import request from '../utils/request'\r\n// 获取所有的考试类型\r\nexport function getAllExamType(){\r\n    return request('/exam/examType');\r\n}\r\n// 获取所有的试题类型\r\nexport function getAllQuestionsType(){\r\n    return request('/exam/getQuestionsType');\r\n}\r\n// 获取所有的课程\r\nexport function getAllSubject(){\r\n    return request('/exam/subject');\r\n}\r\n// 添加试题\r\nexport function addQuestions(questionsInfo){\r\n    return request('/exam/questions',{\r\n        method:'POST',\r\n        body:questionsInfo,\r\n    });\r\n}\r\n// 获取试题\r\nexport function getQusetions(payload){\r\n    let arr = [];\r\n    for(let i in payload){\r\n        if (payload[i]) {\r\n            arr.push(`${i}=${payload[i]}`);\r\n        }\r\n    }\r\n    let str = '?'+arr.join('&');\r\n    console.log(str)\r\n    return request(`/exam/questions/condition${str}`);\r\n}\r\n\r\n// 更新试题\r\n\r\nexport function updateQUestions(updated){\r\n    return request('/exam/questions/update',{\r\n        method:'PUT',\r\n        body:updated\r\n    });\r\n}","import request from '../utils/request'\r\n\r\nexport function createExam(examInfo){\r\n  return request('/exam/exam', {\r\n      method: 'POST',\r\n      body: examInfo,\r\n  });\r\n}\r\n\r\nexport function updateExam({id, question_ids}){\r\n  return request('/exam/exam/'+id, {\r\n      method: 'PUT',\r\n      body: {question_ids: question_ids},\r\n  });\r\n}\r\n\r\nexport function getExamList(examInfo){\r\n  return request('/exam/exam', {\r\n      method: 'GET'\r\n  });\r\n} \r\n\r\nexport function getExamDetail(exam_id){\r\n  return request('/exam/exam/' + exam_id, {\r\n      method: 'GET'\r\n  });\r\n} ","import { getAllExamType, getAllQuestionsType, getAllSubject } from '@/service/questionsManger'\r\nimport { createExam, getExamList } from '@/service/examManger'\r\n\r\nconst requestData = () => {\r\n  return Promise.all([\r\n    getAllExamType(),\r\n    getAllQuestionsType(),\r\n    getAllSubject()\r\n  ]);\r\n}\r\n\r\nconst initState = {\r\n  examType:[],\r\n  questionsType:[],\r\n  subject:[],\r\n  examList: []\r\n};\r\n\r\n\r\nexport default {\r\n  namespace: 'examList',\r\n\r\n  state: initState,\r\n\r\n  reducers: {\r\n    initData (state, payload) { // 初始化数据\r\n      return {...state, ...payload}\r\n    }\r\n  },\r\n\r\n  effects: {\r\n    *requestData (action, {call, put}) {\r\n      let result = yield call(requestData);\r\n      let keys = ['examType','questionsType','subject'];\r\n      let payload = {};\r\n      result.forEach((item,key)=>{\r\n          if(item){\r\n              payload[keys[key]] = item.data;\r\n          }\r\n      });\r\n      console.log(payload)\r\n      yield put({type:'initData',...payload});\r\n    },\r\n\r\n    *createExam ({end_time, exam_id, start_time, subject_id}, {call, put}) {\r\n      let result = yield call(createExam, {\r\n        end_time, exam_id, start_time, subject_id\r\n      })\r\n    },\r\n\r\n    *examList (actions, {call, put}) {\r\n      let result = yield call(getExamList)\r\n      yield put({type:'initData', examList: result.exam});\r\n    }\r\n  }\r\n}"],"sourceRoot":""}