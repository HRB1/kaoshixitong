{"version":3,"sources":["service/questionsManger.js","model/watchQuestions/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","namespace","state","questions","subject","questionsType","examType","reducers","changeState","Object","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","effects","getQuestions","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_ref","call","put","result","wrap","_context","prev","next","filter","sent","code","type","data","stop","this","_ref2","_context2","getQuestionsType","_ref3","_context3","_ref4","_context4"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAA,IAAAC,EAAAT,EAAA,KAEO,SAASG,IACZ,OAAOO,YAAQ,kBAGZ,SAASN,IACZ,OAAOM,YAAQ,0BAGZ,SAASL,IACZ,OAAOK,YAAQ,iBAGZ,SAASJ,EAAaK,GACzB,OAAOD,YAAQ,kBAAkB,CAC7BE,OAAO,OACPC,KAAKF,IAIN,SAASJ,EAAaO,GACzB,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAKF,EACLA,EAAQE,IACRD,EAAIE,KAAJ,GAAAC,OAAYF,EAAZ,KAAAE,OAAiBJ,EAAQE,KAGjC,IAAIG,EAAM,IAAIJ,EAAIK,KAAK,KAEvB,OADAC,QAAQC,IAAIH,GACLT,YAAO,4BAAAQ,OAA6BC,IAKxC,SAASX,EAAgBe,GAC5B,OAAOb,YAAQ,yBAAyB,CACpCE,OAAO,MACPC,KAAKU,qFCrCErB,EAAA,SACXsB,UAAU,iBACVC,MAAM,CACFC,UAAU,GACVC,QAAS,GACTC,cAAe,GACfC,SAAU,IAEdC,SAAS,CACLC,YADK,SACQN,EAAOX,GAChB,OAAOkB,OAAAC,EAAA,EAAAD,CAAA,GAAIP,EAAUX,KAG7BoB,QAAQ,CACHC,aADGC,EAAAC,EAAAC,KAAA,SAAAH,EACUrB,EADVyB,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEa,OADON,EADpBD,EACoBC,KAAKC,EADzBF,EACyBE,IADzBG,EAAAE,KAAA,EAEmBN,EAAKjC,IAAcO,EAAQiC,QAF9C,UAGmB,KADfL,EAFJE,EAAAI,MAGUC,KAHV,CAAAL,EAAAE,KAAA,QAII,OAJJF,EAAAE,KAAA,EAIUL,EAAI,CAACS,KAAK,cAAcxB,UAAUgB,EAAOS,OAJnD,wBAAAP,EAAAQ,SAAAjB,EAAAkB,QAOHhD,cAPG+B,EAAAC,EAAAC,KAAA,SAAAjC,EAOWS,EAPXwC,GAAA,IAAAd,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OAQa,OADQN,EAPrBc,EAOqBd,KAAMC,EAP3Ba,EAO2Bb,IAP3Bc,EAAAT,KAAA,EAQmBN,EAAKnC,KARxB,UASmB,KADfqC,EARJa,EAAAP,MASUC,KATV,CAAAM,EAAAT,KAAA,QAUI,OAVJS,EAAAT,KAAA,EAUUL,EAAI,CAACS,KAAK,cAAcvB,QAAQe,EAAOS,OAVjD,wBAAAI,EAAAH,SAAA/C,EAAAgD,QAaHG,iBAbGpB,EAAAC,EAAAC,KAAA,SAAAkB,EAac1C,EAbd2C,GAAA,IAAAjB,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,OAca,OADWN,EAbxBiB,EAawBjB,KAAKC,EAb7BgB,EAa6BhB,IAb7BiB,EAAAZ,KAAA,EAcmBN,EAAKpC,KAdxB,UAemB,KADfsC,EAdJgB,EAAAV,MAeUC,KAfV,CAAAS,EAAAZ,KAAA,QAgBI,OAhBJY,EAAAZ,KAAA,EAgBUL,EAAI,CAACS,KAAK,cAActB,cAAcc,EAAOS,OAhBvD,wBAAAO,EAAAN,SAAAI,EAAAH,QAmBHlD,eAnBGiC,EAAAC,EAAAC,KAAA,SAAAnC,EAmBYW,EAnBZ6C,GAAA,IAAAnB,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAoBa,OADSN,EAnBtBmB,EAmBsBnB,KAAMC,EAnB5BkB,EAmB4BlB,IAnB5BmB,EAAAd,KAAA,EAoBmBN,EAAKrC,KApBxB,UAqBmB,KADfuC,EApBJkB,EAAAZ,MAqBUC,KArBV,CAAAW,EAAAd,KAAA,QAsBI,OAtBJc,EAAAd,KAAA,EAsBUL,EAAI,CAACS,KAAK,cAAcrB,SAASa,EAAOS,OAtBlD,wBAAAS,EAAAR,SAAAjD,EAAAkD","file":"static/js/5.6552bd0d.chunk.js","sourcesContent":["import request from '../utils/request'\r\n// 获取所有的考试类型\r\nexport function getAllExamType(){\r\n    return request('/exam/examType');\r\n}\r\n// 获取所有的试题类型\r\nexport function getAllQuestionsType(){\r\n    return request('/exam/getQuestionsType');\r\n}\r\n// 获取所有的课程\r\nexport function getAllSubject(){\r\n    return request('/exam/subject');\r\n}\r\n// 添加试题\r\nexport function addQuestions(questionsInfo){\r\n    return request('/exam/questions',{\r\n        method:'POST',\r\n        body:questionsInfo,\r\n    });\r\n}\r\n// 获取试题\r\nexport function getQusetions(payload){\r\n    let arr = [];\r\n    for(let i in payload){\r\n        if (payload[i]) {\r\n            arr.push(`${i}=${payload[i]}`);\r\n        }\r\n    }\r\n    let str = '?'+arr.join('&');\r\n    console.log(str)\r\n    return request(`/exam/questions/condition${str}`);\r\n}\r\n\r\n// 更新试题\r\n\r\nexport function updateQUestions(updated){\r\n    return request('/exam/questions/update',{\r\n        method:'PUT',\r\n        body:updated\r\n    });\r\n}","import {getQusetions, getAllSubject, getAllQuestionsType, getAllExamType} from '@/service/questionsManger'\r\nexport default {\r\n    namespace:'watchQuestions',\r\n    state:{\r\n        questions:[],\r\n        subject: [],\r\n        questionsType: [],\r\n        examType: []\r\n    },\r\n    reducers:{\r\n        changeState (state, payload) {\r\n            return {...state, ...payload}\r\n        }\r\n    },\r\n    effects:{\r\n        *getQuestions(payload, {call,put}){\r\n            let result = yield call(getQusetions, payload.filter);\r\n            if(result.code === 1){\r\n                yield put({type:'changeState',questions:result.data});\r\n            }\r\n        },\r\n        *getAllSubject(payload, {call, put}) {\r\n            let result = yield call(getAllSubject);\r\n            if(result.code === 1){\r\n                yield put({type:'changeState',subject:result.data});\r\n            }\r\n        },\r\n        *getQuestionsType(payload, {call,put}) {\r\n            let result = yield call(getAllQuestionsType);\r\n            if(result.code === 1){\r\n                yield put({type:'changeState',questionsType:result.data});\r\n            }\r\n        },\r\n        *getAllExamType(payload, {call, put}) {\r\n            let result = yield call(getAllExamType);\r\n            if(result.code === 1){\r\n                yield put({type:'changeState',examType:result.data});\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}