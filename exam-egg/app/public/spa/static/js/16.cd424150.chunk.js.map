{"version":3,"sources":["service/questionsManger.js","model/questionsType/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","initState","table","page","pageSize","total","data","isPersonalType","namespace","state","reducers","changeTable","action","Object","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","effects","fetch","C_Users_yihan_Desktop_react_exam_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_ref","_ref2","call","put","params","response","wrap","_context","prev","next","sent","type","stop","this"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAA,IAAAC,EAAAT,EAAA,KAEO,SAASG,IACZ,OAAOO,YAAQ,kBAGZ,SAASN,IACZ,OAAOM,YAAQ,0BAGZ,SAASL,IACZ,OAAOK,YAAQ,iBAGZ,SAASJ,EAAaK,GACzB,OAAOD,YAAQ,kBAAkB,CAC7BE,OAAO,OACPC,KAAKF,IAIN,SAASJ,EAAaO,GACzB,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAKF,EACLA,EAAQE,IACRD,EAAIE,KAAJ,GAAAC,OAAYF,EAAZ,KAAAE,OAAiBJ,EAAQE,KAGjC,IAAIG,EAAM,IAAIJ,EAAIK,KAAK,KAEvB,OADAC,QAAQC,IAAIH,GACLT,YAAO,4BAAAQ,OAA6BC,IAKxC,SAASX,EAAgBe,GAC5B,OAAOb,YAAQ,yBAAyB,CACpCE,OAAO,MACPC,KAAKU,qFCpCPC,EAAY,CAChBC,MAAO,CACLC,KAAM,EACNC,SAAU,GACVC,MAAO,EACPC,KAAM,IAERC,eAAgB,MAIlB5B,EAAA,SACE6B,UAAW,gBAEXC,MAAOR,EAEPS,SAAU,CACRC,YADQ,SACIF,EAAOG,GACjB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEP,MAAMW,OAAAC,EAAA,EAAAD,CAAA,GACDJ,EAAMP,MACNU,EAAOrB,aAMlBwB,QAAS,CACNC,MADMC,EAAAC,EAAAC,KAAA,SAAAH,EAAAI,EAAAC,GAAA,IAAA9B,EAAA+B,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOY,OANVtC,EADF6B,EACE7B,QAAW+B,EADbD,EACaC,KAAMC,EADnBF,EACmBE,IAClBC,EAFDX,OAAAC,EAAA,EAAAD,CAAA,CAGHV,KAAMF,EAAUC,MAAMC,KACtBC,SAAUH,EAAUC,MAAME,UACvBb,GALAoC,EAAAE,KAAA,EAOkBP,EAAKzC,IAAqB2C,GAP5C,OAQL,OADMC,EAPDE,EAAAG,KAAAH,EAAAE,KAAA,EAQCN,EAAI,CACRQ,KAAM,cACNxC,QAAS,CACPe,KAAMmB,EAASnB,QAXd,wBAAAqB,EAAAK,SAAAhB,EAAAiB","file":"static/js/16.cd424150.chunk.js","sourcesContent":["import request from '../utils/request'\r\n// 获取所有的考试类型\r\nexport function getAllExamType(){\r\n    return request('/exam/examType');\r\n}\r\n// 获取所有的试题类型\r\nexport function getAllQuestionsType(){\r\n    return request('/exam/getQuestionsType');\r\n}\r\n// 获取所有的课程\r\nexport function getAllSubject(){\r\n    return request('/exam/subject');\r\n}\r\n// 添加试题\r\nexport function addQuestions(questionsInfo){\r\n    return request('/exam/questions',{\r\n        method:'POST',\r\n        body:questionsInfo,\r\n    });\r\n}\r\n// 获取试题\r\nexport function getQusetions(payload){\r\n    let arr = [];\r\n    for(let i in payload){\r\n        if (payload[i]) {\r\n            arr.push(`${i}=${payload[i]}`);\r\n        }\r\n    }\r\n    let str = '?'+arr.join('&');\r\n    console.log(str)\r\n    return request(`/exam/questions/condition${str}`);\r\n}\r\n\r\n// 更新试题\r\n\r\nexport function updateQUestions(updated){\r\n    return request('/exam/questions/update',{\r\n        method:'PUT',\r\n        body:updated\r\n    });\r\n}","import {getAllQuestionsType} from '@/service/questionsManger'\r\n\r\nconst initState = {\r\n  table: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 0,\r\n    data: [],\r\n  },\r\n  isPersonalType: null,\r\n};\r\n\r\n\r\nexport default {\r\n  namespace: 'questionsType',\r\n\r\n  state: initState,\r\n\r\n  reducers: {\r\n    changeTable(state, action) {\r\n      return {\r\n        ...state,\r\n        table: {\r\n          ...state.table,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    }\r\n  },\r\n\r\n  effects: {\r\n    *fetch ({payload}, {call, put}) {\r\n      const params = {\r\n        page: initState.table.page,\r\n        pageSize: initState.table.pageSize,\r\n        ...payload\r\n      };\r\n      const response = yield call(getAllQuestionsType, params);\r\n      yield put({\r\n        type: 'changeTable',\r\n        payload: {\r\n          data: response.data\r\n        }\r\n      })\r\n    },\r\n  }\r\n}"],"sourceRoot":""}